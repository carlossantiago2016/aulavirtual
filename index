<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Santo Aules - Extendido</title>
<style>
  body {
    margin: 0; font-family: Arial, sans-serif;
    background: linear-gradient(135deg, #000000, #4b0082);
    color: white;
  }
  .container {
    max-width: 900px; margin: auto; padding: 20px;
  }
  h1, h2 { text-align: center; }
  input, select, button {
    width: 100%; margin: 10px 0; padding: 10px;
    border: none; border-radius: 5px;
    background-color: #222; color: white;
  }
  button {
    background-color: #6a0dad; cursor: pointer;
    transition: background-color 0.3s ease;
  }
  button:hover {
    background-color: #9b30ff;
  }
  .hidden { display: none; }
  nav {
    text-align: center; margin: 20px 0;
  }
  nav button {
    margin: 5px; width: auto;
  }
  #chatBox {
    background: #111; padding: 10px; height: 200px;
    overflow-y: auto; border: 1px solid #555; border-radius: 5px;
  }
  #ticTacToe {
    display: grid; grid-template-columns: repeat(3, 1fr);
    gap: 5px; margin-top: 10px;
  }
  #ticTacToe button {
    height: 60px; font-size: 24px; background-color: #333;
    cursor: pointer;
  }
  .clase {
    margin: 10px 0; padding: 10px;
    background: #222; border-left: 4px solid #6a0dad;
  }
  #modoSelect, #grado, #materia {
    max-width: 300px; margin-left: auto; margin-right: auto; display: block;
  }
  /* Tetris */
  #tetrisCanvas {
    background: #111; display: block; margin: 20px auto;
    border: 2px solid #6a0dad; border-radius: 10px;
  }
  #quiz {
    background: #222; padding: 15px; border-radius: 8px;
  }
  #quiz button {
    width: auto; margin: 5px 10px 10px 0;
  }
  #tutorial {
    background: #2d004d; padding: 15px; border-radius: 10px; margin-top: 15px;
    font-size: 14px; line-height: 1.4;
  }
</style>
</head>
<body>

<div class="container" id="auth">
  <h1>Santo Aules</h1>
  <h2>Registrarse / Iniciar Sesi√≥n</h2>
  <input type="text" id="user" placeholder="Usuario">
  <input type="password" id="pass" placeholder="Contrase√±a">
  <button onclick="register()">Registrarse</button>
  <button onclick="login()">Iniciar Sesi√≥n</button>
  <p id="error" style="color: #f88; text-align:center;"></p>

  <div id="tutorial">
    <h3>¬øC√≥mo usar Santo Aules?</h3>
    <p><strong>Registro:</strong> Escribe un usuario y contrase√±a que recuerdes y pulsa "Registrarse".</p>
    <p><strong>Inicio de sesi√≥n:</strong> Usa tu usuario y contrase√±a y pulsa "Iniciar Sesi√≥n".</p>
  </div>
</div>

<div class="container hidden" id="main">
  <h1>Bienvenido a Santo Aules</h1>
  <nav>
    <button onclick="show('games')">üéÆ Juegos</button>
    <button onclick="show('ia')">ü§ñ IA</button>
    <button onclick="show('aula')">üìö Aula</button>
    <button onclick="logout()" style="background:#800080; margin-left:30px;">Cerrar Sesi√≥n</button>
  </nav>

  <!-- JUEGOS -->
  <section id="games" class="hidden">
    <h2>Juegos Disponibles</h2>
    <nav>
      <button onclick="showGame('gato')">Gato vs IA</button>
      <button onclick="showGame('tetris')">Tetris</button>
      <button onclick="showGame('quiz')">Quiz de Preguntas</button>
    </nav>

    <!-- GATO -->
    <div id="gato" class="hidden">
      <h3>Gato vs IA</h3>
      <select id="modoSelect">
        <option value="facil">F√°cil</option>
        <option value="dificil">Dif√≠cil</option>
        <option value="imposible">Imposible</option>
      </select>
      <div id="ticTacToe"></div>
      <p id="winner"></p>
      <button onclick="resetGame()">Reiniciar Gato</button>
    </div>

    <!-- TETRIS -->
    <div id="tetris" class="hidden">
      <h3>Tetris</h3>
      <canvas id="tetrisCanvas" width="240" height="400"></canvas>
      <p>Puntuaci√≥n: <span id="score">0</span></p>
      <button onclick="startTetris()">Reiniciar Tetris</button>
      <p><small>Controles: Flechas ‚Üê ‚Üí para mover, ‚Üë para rotar, ‚Üì para bajar r√°pido.</small></p>
    </div>

    <!-- QUIZ -->
    <div id="quiz" class="hidden">
      <h3>Quiz de Preguntas</h3>
      <div id="preguntaTexto"></div>
      <div id="opciones"></div>
      <p id="resultadoQuiz"></p>
      <button onclick="siguientePregunta()">Siguiente Pregunta</button>
    </div>
  </section>

  <!-- IA -->
  <section id="ia" class="hidden">
    <h2>Chat con IA</h2>
    <div id="chatBox"></div>
    <input id="chatInput" placeholder="Habla con la IA" onkeydown="if(event.key==='Enter') sendMessage()">
  </section>

  <!-- AULA -->
  <section id="aula" class="hidden">
    <h2>Aula Virtual</h2>
    <select id="grado">
      <option value="">Selecciona tu grado</option>
      <option value="primaria">Primaria</option>
      <option value="secundaria">Secundaria</option>
    </select>
    <select id="materia">
      <option value="">Selecciona una materia</option>
      <option value="robotica">Rob√≥tica</option>
      <option value="ingles">Ingl√©s</option>
      <option value="historia">Historia</option>
      <option value="matematicas">Matem√°ticas</option>
      <option value="ciencia">Ciencia</option>
    </select>
    <button onclick="mostrarClase()">Ver Clases</button>
    <div id="contenidoAula"></div>
  </section>
</div>

<script>
  // Usuarios guardados en localStorage (simple)
  let users = JSON.parse(localStorage.getItem('users') || "[]");

  // Para probar puedes tener este usuario por defecto en el sistema
  if (!users.find(u => u.usuario === 'santo')) {
    users.push({usuario: 'santo', contrase√±a: 'Tijuana2016'});
    localStorage.setItem('users', JSON.stringify(users));
  }

  function register() {
    const user = document.getElementById('user').value.trim().toLowerCase();
    const pass = document.getElementById('pass').value;
    const error = document.getElementById('error');
    if(!user || !pass){
      error.textContent = 'Por favor llena usuario y contrase√±a.';
      return;
    }
    if(users.find(u => u.usuario === user)){
      error.textContent = 'El usuario ya existe, intenta otro.';
      return;
    }
    users.push({usuario: user, contrase√±a: pass});
    localStorage.setItem('users', JSON.stringify(users));
    error.style.color = '#8f8';
    error.textContent = 'Usuario registrado con √©xito. Ya puedes iniciar sesi√≥n.';
  }

  function login() {
    const user = document.getElementById('user').value.trim().toLowerCase();
    const pass = document.getElementById('pass').value;
    const error = document.getElementById('error');
    if(!user || !pass){
      error.textContent = 'Por favor llena usuario y contrase√±a.';
      return;
    }
    const u = users.find(u => u.usuario === user && u.contrase√±a === pass);
    if(!u){
      error.textContent = 'Usuario o contrase√±a incorrectos.';
      return;
    }
    error.textContent = '';
    document.getElementById('auth').classList.add('hidden');
    document.getElementById('main').classList.remove('hidden');
    show('games');
    resetGame();
    startTetris();
    iniciarQuiz();
  }

  function logout() {
    document.getElementById('main').classList.add('hidden');
    document.getElementById('auth').classList.remove('hidden');
    document.getElementById('user').value = '';
    document.getElementById('pass').value = '';
    document.getElementById('error').textContent = '';
  }

  // Navegaci√≥n secciones
  function show(id){
    ['games','ia','aula'].forEach(sec => {
      document.getElementById(sec).classList.add('hidden');
    });
    document.getElementById(id).classList.remove('hidden');
    // Ocultar juegos internos
    ['gato','tetris','quiz'].forEach(g => document.getElementById(g).classList.add('hidden'));
  }

  function showGame(game){
    ['gato','tetris','quiz'].forEach(g => {
      document.getElementById(g).classList.add('hidden');
    });
    document.getElementById(game).classList.remove('hidden');
  }

  // GATO CON IA
  let board = ['', '', '', '', '', '', '', '', ''];
  let currentPlayer = 'X'; 
  let gameActive = true;

  function resetGame() {
    board = ['', '', '', '', '', '', '', '', ''];
    currentPlayer = 'X';
    gameActive = true;
    document.getElementById('winner').textContent = '';
    renderBoard();
  }

  function renderBoard() {
    const container = document.getElementById('ticTacToe');
    container.innerHTML = '';
    board.forEach((cell, i) => {
      const btn = document.createElement('button');
      btn.textContent = cell;
      btn.disabled = !gameActive || cell !== '';
      btn.onclick = () => {
        if(!gameActive || board[i]) return;
        board[i] = 'X';
        renderBoard();
        if(checkWin('X')){
          endGame('¬°Ganaste!');
          return;
        }
        if(board.every(c => c !== '')){
          endGame('Empate.');
          return;
        }
        currentPlayer = 'O';
        setTimeout(() => {
          iaMove();
          renderBoard();
          if(checkWin('O')){
            endGame('Perdiste. La IA gan√≥.');
            return;
          }
          if(board.every(c => c !== '')){
            endGame('Empate.');
            return;
          }
          currentPlayer = 'X';
        }, 300);
      };
      container.appendChild(btn);
    });
  }

  function checkWin(sym) {
    const lines = [
      [0,1,2],[3,4,5],[6,7,8],
      [0,3,6],[1,4,7],[2,5,8],
      [0,4,8],[2,4,6]
    ];
    return lines.some(line => line.every(i => board[i] === sym));
  }

  function endGame(msg){
    document.getElementById('winner').textContent = msg;
    gameActive = false;
    renderBoard();
  }

  // IA MOVE MODOS
  function iaMove(){
    const modo = document.getElementById('modoSelect').value;
    if(modo === 'facil'){
      iaMoveFacil();
    } else if(modo === 'dificil'){
      iaMoveDificil();
    } else {
      iaMoveImposible();
    }
  }

  // F√°cil: mueve aleatorio
  function iaMoveFacil(){
    const free = board.map((c,i) => c === '' ? i : -1).filter(i => i !== -1);
    const idx = free[Math.floor(Math.random() * free.length)];
    board[idx] = 'O';
  }

  // Dif√≠cil: bloquea si puede, si no aleatorio
  function iaMoveDificil(){
    // Intenta ganar
    for(let i=0; i<9; i++){
      if(board[i]===''){
        board[i] = 'O';
        if(checkWin('O')) return;
        board[i] = '';
      }
    }
    // Intenta bloquear
    for(let i=0; i<9; i++){
      if(board[i]===''){
        board[i] = 'X';
        if(checkWin('X')){
          board[i] = 'O';
          return;
        }
        board[i] = '';
      }
    }
    iaMoveFacil();
  }

  // Imposible: minimax
  function iaMoveImposible(){
    let bestScore = -Infinity;
    let move = -1;
    for(let i=0; i<9; i++){
      if(board[i]===''){
        board[i] = 'O';
        let score = minimax(board, false);
        board[i] = '';
        if(score > bestScore){
          bestScore = score;
          move = i;
        }
      }
    }
    board[move] = 'O';
  }

  function minimax(b, isMaximizing){
    if(checkWin('O')) return 1;
    if(checkWin('X')) return -1;
    if(b.every(c => c !== '')) return 0;

    if(isMaximizing){
      let bestScore = -Infinity;
      for(let i=0; i<9; i++){
        if(b[i]===''){
          b[i] = 'O';
          let score = minimax(b, false);
          b[i] = '';
          bestScore = Math.max(score, bestScore);
        }
      }
      return bestScore;
    } else {
      let bestScore = Infinity;
      for(let i=0; i<9; i++){
        if(b[i]===''){
          b[i] = 'X';
          let score = minimax(b, true);
          b[i] = '';
          bestScore = Math.min(score, bestScore);
        }
      }
      return bestScore;
    }
  }

  // CHAT IA SIMPLE
  function sendMessage(){
    const input = document.getElementById('chatInput');
    const chatBox = document.getElementById('chatBox');
    const msg = input.value.trim();
    if(!msg) return;
    chatBox.innerHTML += `<p><strong>T√∫:</strong> ${msg}</p>`;
    input.value = '';
    setTimeout(() => {
      chatBox.innerHTML += `<p><strong>IA:</strong> ${responderIA(msg)}</p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    }, 800);
  }

  function responderIA(text){
    text = text.toLowerCase();
    if(text.includes('hola') || text.includes('buenas')) return '¬°Hola! ¬øC√≥mo puedo ayudarte hoy?';
    if(text.includes('c√≥mo est√°s')) return 'Estoy aqu√≠ para ayudarte con Santo Aules.';
    if(text.includes('clase') || text.includes('aula')) return 'Puedes visitar la secci√≥n Aula para aprender distintas materias.';
    if(text.includes('juego') || text.includes('juegos')) return 'En la secci√≥n Juegos tienes varios para divertirte y aprender.';
    return 'Interesante, dime m√°s...';
  }

  // AULA: Contenido
  const clases = {
    primaria: {
      robotica: [
        {
          titulo: 'Clase 1: ¬øQu√© es un robot?',
          contenido: 'Un robot es una m√°quina programable que puede realizar tareas autom√°ticamente. Ejemplos: aspiradoras inteligentes, brazos mec√°nicos.'
        },
        {
          titulo: 'Clase 2: Sensores y motores',
          contenido: 'Los sensores permiten al robot detectar su entorno, mientras que los motores le ayudan a moverse o manipular objetos.'
        },
        {
          titulo: 'Clase 3: Programando un robot simple',
          contenido: 'Para programar un robot, se usan instrucciones b√°sicas como moverse hacia adelante, girar o detenerse.'
        }
      ],
      ingles: [
        {
          titulo: 'Clase 1: Saludos',
          contenido: 'En ingl√©s, para saludar decimos "Hello" o "Hi". Por ejemplo: Hello, how are you?'
        },
        {
          titulo: 'Clase 2: Colores y n√∫meros',
          contenido: 'Colores: red (rojo), blue (azul), green (verde). N√∫meros: one (1), two (2), three (3).'
        },
        {
          titulo: 'Clase 3: Familia',
          contenido: 'Palabras relacionadas: mother (madre), father (padre), brother (hermano).'
        }
      ],
      historia: [
        {
          titulo: 'Clase 1: Civilizaciones antiguas',
          contenido: 'Las civilizaciones antiguas incluyen Egipto, Mesopotamia y Grecia, conocidas por sus avances culturales.'
        },
        {
          titulo: 'Clase 2: Grandes inventos',
          contenido: 'Inventos como la rueda, la imprenta y la electricidad cambiaron el mundo.'
        },
        {
          titulo: 'Clase 3: Personajes importantes',
          contenido: 'Figuras como Leonardo da Vinci, Marie Curie y Nelson Mandela influyeron en la historia.'
        }
      ],
      matematicas: [
        {
          titulo: 'Clase 1: Sumas y restas',
          contenido: 'La suma es juntar cantidades. Ejemplo: 2 + 3 = 5. La resta es quitar cantidades. Ejemplo: 5 - 2 = 3.'
        },
        {
          titulo: 'Clase 2: Multiplicaci√≥n',
          contenido: 'Multiplicar es sumar varias veces el mismo n√∫mero. Ejemplo: 3 x 4 = 12.'
        },
        {
          titulo: 'Clase 3: Divisi√≥n',
          contenido: 'Dividir es repartir en partes iguales. Ejemplo: 12 √∑ 3 = 4.'
        }
      ],
      ciencia: [
        {
          titulo: 'Clase 1: Los animales',
          contenido: 'Los animales son seres vivos que se alimentan y se reproducen.'
        },
        {
          titulo: 'Clase 2: Plantas',
          contenido: 'Las plantas producen ox√≠geno y alimentos para muchos seres vivos.'
        },
        {
          titulo: 'Clase 3: El agua',
          contenido: 'El agua es vital para la vida y cubre la mayor parte de la Tierra.'
        }
      ],
    },
    secundaria: {
      robotica: [
        {
          titulo: 'Clase 1: Programaci√≥n avanzada',
          contenido: 'Uso de algoritmos y l√≥gica para controlar robots.'
        },
        {
          titulo: 'Clase 2: Sensores digitales y anal√≥gicos',
          contenido: 'Diferencias y aplicaciones de sensores en rob√≥tica.'
        },
        {
          titulo: 'Clase 3: Proyectos pr√°cticos',
          contenido: 'Dise√±o y construcci√≥n de un robot aut√≥nomo.'
        }
      ],
      ingles: [
        {
          titulo: 'Clase 1: Gram√°tica b√°sica',
          contenido: 'Estructura de oraciones y tiempos verbales.'
        },
        {
          titulo: 'Clase 2: Vocabulario avanzado',
          contenido: 'Palabras y expresiones para conversaciones complejas.'
        },
        {
          titulo: 'Clase 3: Comprensi√≥n lectora',
          contenido: 'Lectura y an√°lisis de textos en ingl√©s.'
        }
      ],
      historia: [
        {
          titulo: 'Clase 1: Historia mundial moderna',
          contenido: 'Eventos desde la Revoluci√≥n Industrial hasta la actualidad.'
        },
        {
          titulo: 'Clase 2: Guerras mundiales',
          contenido: 'Causas y consecuencias de la Primera y Segunda Guerra Mundial.'
        },
        {
          titulo: 'Clase 3: Movimientos sociales',
          contenido: 'Estudio de derechos civiles y cambios sociales.'
        }
      ],
      matematicas: [
        {
          titulo: 'Clase 1: √Ålgebra',
          contenido: 'Ecuaciones, expresiones y factorizaci√≥n.'
        },
        {
          titulo: 'Clase 2: Geometr√≠a',
          contenido: 'Propiedades de figuras y c√°lculo de √°reas y vol√∫menes.'
        },
        {
          titulo: 'Clase 3: Trigonometr√≠a',
          contenido: 'Funciones trigonom√©tricas y aplicaciones.'
        }
      ],
      ciencia: [
        {
          titulo: 'Clase 1: F√≠sica b√°sica',
          contenido: 'Leyes del movimiento y fuerzas.'
        },
        {
          titulo: 'Clase 2: Qu√≠mica',
          contenido: 'Elementos, compuestos y reacciones qu√≠micas.'
        },
        {
          titulo: 'Clase 3: Biolog√≠a',
          contenido: 'C√©lulas, gen√©tica y evoluci√≥n.'
        }
      ],
    }
  };

  function mostrarClase(){
    const grado = document.getElementById('grado').value;
    const materia = document.getElementById('materia').value;
    const cont = document.getElementById('contenidoAula');
    cont.innerHTML = '';
    if(!grado || !materia){
      cont.innerHTML = '<p>Por favor selecciona grado y materia.</p>';
      return;
    }
    if(!clases[grado] || !clases[grado][materia]){
      cont.innerHTML = '<p>No hay clases para esta combinaci√≥n.</p>';
      return;
    }
    const listaClases = clases[grado][materia];
    listaClases.forEach(c => {
      const div = document.createElement('div');
      div.className = 'clase';
      div.innerHTML = `<h4>${c.titulo}</h4><p>${c.contenido}</p>`;
      cont.appendChild(div);
    });
  }

  // TETRIS
  const canvas = document.getElementById('tetrisCanvas');
  const context = canvas.getContext('2d');
  const ROWS = 20;
  const COLS = 10;
  const BLOCK_SIZE = 20;

  context.scale(BLOCK_SIZE, BLOCK_SIZE);

  const colors = [
    null,
    '#6a0dad',
    '#9b30ff',
    '#5f00ba',
    '#a020f0',
    '#7b68ee',
    '#8a2be2',
    '#9400d3'
  ];

  const tetrominos = {
    I: [
      [[0,0,0,0],
       [1,1,1,1],
       [0,0,0,0],
       [0,0,0,0]],
      [[0,0,1,0],
       [0,0,1,0],
       [0,0,1,0],
       [0,0,1,0]]
    ],
    J: [
      [[2,0,0],
       [2,2,2],
       [0,0,0]],
      [[0,2,2],
       [0,2,0],
       [0,2,0]],
      [[0,0,0],
       [2,2,2],
       [0,0,2]],
      [[0,2,0],
       [0,2,0],
       [2,2,0]]
    ],
    L: [
      [[0,0,3],
       [3,3,3],
       [0,0,0]],
      [[0,3,0],
       [0,3,0],
       [0,3,3]],
      [[0,0,0],
       [3,3,3],
       [3,0,0]],
      [[3,3,0],
       [0,3,0],
       [0,3,0]]
    ],
    O: [
      [[4,4],
       [4,4]]
    ],
    S: [
      [[0,5,5],
       [5,5,0],
       [0,0,0]],
      [[0,5,0],
       [0,5,5],
       [0,0,5]]
    ],
    T: [
      [[0,6,0],
       [6,6,6],
       [0,0,0]],
      [[0,6,0],
       [0,6,6],
       [0,6,0]],
      [[0,0,0],
       [6,6,6],
       [0,6,0]],
      [[0,6,0],
       [6,6,0],
       [0,6,0]]
    ],
    Z: [
      [[7,7,0],
       [0,7,7],
       [0,0,0]],
      [[0,0,7],
       [0,7,7],
       [0,7,0]]
    ]
  };

  function createMatrix(w,h){
    const matrix = [];
    while(h--) matrix.push(new Array(w).fill(0));
    return matrix;
  }

  function drawMatrix(matrix, offset){
    matrix.forEach((row,y) => {
      row.forEach((value,x) => {
        if(value !== 0){
          context.fillStyle = colors[value];
          context.fillRect(x + offset.x, y + offset.y, 1,1);
        }
      });
    });
  }

  let arena = createMatrix(COLS, ROWS);

  function merge(arena, player){
    player.matrix.forEach((row,y) => {
      row.forEach((value,x) => {
        if(value !== 0){
          arena[y + player.pos.y][x + player.pos.x] = value;
        }
      });
    });
  }

  function collide(arena, player){
    const m = player.matrix;
    const o = player.pos;
    for(let y=0; y<m.length; ++y){
      for(let x=0; x<m[y].length; ++x){
        if(m[y][x] !== 0 &&
          (arena[y + o.y] && arena[y + o.y][x + o.x]) !== 0){
          return true;
        }
      }
    }
    return false;
  }

  function arenaSweep(){
    let rowCount = 1;
    outer: for(let y=arena.length - 1; y >= 0; --y){
      for(let x=0; x < arena[y].length; ++x){
        if(arena[y][x] === 0){
          continue outer;
        }
      }
      const row = arena.splice(y,1)[0].fill(0);
      arena.unshift(row);
      y++;
      player.score += rowCount * 10;
      rowCount *= 2;
    }
  }

  function rotate(matrix, dir){
    for(let y=0; y<matrix.length; ++y){
      for(let x=0; x<y; ++x){
        [matrix[x][y], matrix[y][x]] = [matrix[y][x], matrix[x][y]];
      }
    }
    if(dir > 0){
      matrix.forEach(row => row.reverse());
    } else {
      matrix.reverse();
    }
  }

  function playerReset(){
    const pieces = 'TJLOSZI';
    player.matrix = createPiece(pieces[pieces.length * Math.random() | 0]);
    player.pos.y = 0;
    player.pos.x = (arena[0].length / 2 | 0) - (player.matrix[0].length / 2 | 0);
    if(collide(arena, player)){
      arena.forEach(row => row.fill(0));
      player.score = 0;
      updateScore();
    }
  }

  function createPiece(type){
    if(type === 'T') return tetrominos.T[0];
    if(type === 'O') return tetrominos.O[0];
    if(type === 'L') return tetrominos.L[0];
    if(type === 'J') return tetrominos.J[0];
    if(type === 'I') return tetrominos.I[0];
    if(type === 'S') return tetrominos.S[0];
    if(type === 'Z') return tetrominos.Z[0];
  }

  let dropCounter = 0;
  let dropInterval = 1000;
  let lastTime = 0;

  function update(time = 0){
    const deltaTime = time - lastTime;
    lastTime = time;
    dropCounter += deltaTime;
    if(dropCounter > dropInterval){
      playerDrop();
    }
    draw();
    requestAnimationFrame(update);
  }

  function draw(){
    context.fillStyle = '#000';
    context.fillRect(0,0, canvas.width, canvas.height);
    drawMatrix(arena, {x:0,y:0});
    drawMatrix(player.matrix, player.pos);
  }

  function playerDrop(){
    player.pos.y++;
    if(collide(arena, player)){
      player.pos.y--;
      merge(arena, player);
      arenaSweep();
      updateScore();
      playerReset();
    }
    dropCounter = 0;
  }

  function playerMove(dir){
    player.pos.x += dir;
    if(collide(arena, player)){
      player.pos.x -= dir;
    }
  }

  function playerRotate(dir){
    const pos = player.pos.x;
    let offset = 1;
    rotate(player.matrix, dir);
    while(collide(arena, player)){
      player.pos.x += offset;
      offset = -(offset + (offset > 0 ? 1 : -1));
      if(offset > player.matrix[0].length){
        rotate(player.matrix, -dir);
        player.pos.x = pos;
        return;
      }
    }
  }

  function updateScore(){
    document.getElementById('score').textContent = player.score;
  }

  const player = {
    pos: {x:0,y:0},
    matrix: null,
    score: 0
  };

  function startTetris(){
    arena.forEach(row => row.fill(0));
    player.score = 0;
    playerReset();
    updateScore();
    lastTime = 0;
    dropCounter = 0;
  }

  document.addEventListener('keydown', event => {
    if(document.getElementById('tetris').classList.contains('hidden')) return;
    if(event.key === 'ArrowLeft'){
      playerMove(-1);
    } else if(event.key === 'ArrowRight'){
      playerMove(1);
    } else if(event.key === 'ArrowDown'){
      playerDrop();
    } else if(event.key === 'ArrowUp'){
      playerRotate(1);
    }
  });

  update();

  // QUIZ SIMPLE
  const preguntas = [
    {
      pregunta: '¬øCu√°l es la capital de M√©xico?',
      opciones: ['Guadalajara', 'Ciudad de M√©xico', 'Monterrey', 'Puebla'],
      correcta: 1
    },
    {
      pregunta: '¬øQu√© planeta es conocido como el planeta rojo?',
      opciones: ['Venus', 'Marte', 'J√∫piter', 'Saturno'],
      correcta: 1
    },
    {
      pregunta: '¬øCu√°l es el resultado de 5 x 6?',
      opciones: ['30', '56', '11', '25'],
      correcta: 0
    }
  ];

  let indexPregunta = 0;

  function iniciarQuiz(){
    indexPregunta = 0;
    mostrarPregunta();
    document.getElementById('resultadoQuiz').textContent = '';
  }

  function mostrarPregunta(){
    const p = preguntas[indexPregunta];
    document.getElementById('preguntaTexto').textContent = p.pregunta;
    const opcionesDiv = document.getElementById('opciones');
    opcionesDiv.innerHTML = '';
    p.opciones.forEach((op, i) => {
      const btn = document.createElement('button');
      btn.textContent = op;
      btn.onclick = () => {
        if(i === p.correcta){
          document.getElementById('resultadoQuiz').textContent = '¬°Correcto!';
        } else {
          document.getElementById('resultadoQuiz').textContent = 'Incorrecto, intenta otra vez.';
        }
      };
      opcionesDiv.appendChild(btn);
    });
  }

  function siguientePregunta(){
    indexPregunta++;
    if(indexPregunta >= preguntas.length){
      indexPregunta = 0;
    }
    document.getElementById('resultadoQuiz').textContent = '';
    mostrarPregunta();
  }

</script>

</body>
</html>
